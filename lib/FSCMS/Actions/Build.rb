#--
# Copyright (c) 2010 - 2012 Muriel Salvan (muriel@x-aeon.com)
# Licensed under the terms specified in LICENSE file. No warranty is provided.
#++

require 'fileutils'

module FSCMS

  module Actions
  
    class Build

      # Get the specific options parser
      #
      # Return::
      # * _OptionsParser_: The options parser
      def getOptionsParser
        rOptions = OptionParser.new

        # The list of targets, as specified as options
        # list< String >
        @LstTargets = []
        @ForceBuild = false

        # Initialize properties that will be set by the options parser
        rOptions.on( '--target <TargetName>', String,
          '<TargetName>: Name of target to build (ex.: TrackMusics/RR126/0.1.20101102/WAV_192kHz_24bits)',
          'Set a Target to build (can be specified several times).') do |iArg|
          @LstTargets << iArg
        end
        rOptions.on( '--force',
          'Force building this target even if it was already built.') do
          @ForceBuild = true
        end

        return rOptions
      end

      # Execute the action
      # This method can use the following instance variables to access common properties:
      # * *@Proxy*: The proxy of SimpleCSM
      def execute
        @Proxy.foreachDeliverable(@LstTargets) do |iDeliverable|
          @Proxy.visitDeliverable(iDeliverable,  true) do |iVisitedDeliverable|
            buildDeliverable(iVisitedDeliverable)
          end
        end
      end

      private

      # Build a given deliverable.
      # Prerequisite: its dependencies have been built.
      #
      # Parameters::
      # * *ioDeliverable* (_Deliverable_): Deliverable to build
      def buildDeliverable(ioDeliverable)
        if ((!@ForceBuild) and
            (File.exists?(ioDeliverable.RealDir)))
          log_info "Deliverable #{ioDeliverable.ID} is already built."
        else
          lProcessInfo, lProcessParams = ioDeliverable.getProcessInfo
          if (lProcessInfo == nil)
            # No process to build it.
            # Tell the user it has to do it by hand.
            log_msg "No process defined to build deliverable #{ioDeliverable.ID}. Build it manually and press Enter to continue."
            $stdin.gets
          else
            # Execute the building process
            log_info "Build deliverable #{ioDeliverable.ID} ..."
            lAliases = ioDeliverable.Context.Aliases.merge(@Proxy.params2aliases(lProcessParams))
            lProcessDir = lProcessInfo[:Dir] || ioDeliverable.RealDir
            lRealProcessDir = @Proxy.replaceAliases(lProcessDir, lAliases)
            lCmd = lProcessInfo[:Cmd]
            if (lCmd == nil)
              raise RuntimeError.new("Process #{ioDeliverable.Context.Properties[:Execute][:Process].to_s} has no :Cmd attribute defined.")
            end
            lRealCmd = @Proxy.replaceAliases(lCmd, lAliases)
            # Create the destination dir
            FileUtils::mkdir_p(ioDeliverable.RealDir)
            # Execute the process
            change_dir(lRealProcessDir) do
              log_debug "Execute command \"#{lRealCmd}\" from \"#{lRealProcessDir}\"..."
              lSuccess = system(lRealCmd)
              lErrorCode = $?
              if (lSuccess != true)
                raise RuntimeError.new("Error while executing \"#{lRealCmd}\" from \"#{lRealProcessDir}\": #{lErrorCode}")
              end
              log_debug "Command \"#{lRealCmd}\" from \"#{lRealProcessDir}\" completed."
            end
            # Generate properties if needed
            if (lProcessInfo[:Output] != nil)
              # Create each string line to append to the file
              lLstLines = []
              lProcessInfo[:Output].each do |iKey, iValue|
                lLstLines << "  :#{iKey.to_s} => #{@Proxy.replaceAliases(iValue, lAliases).inspect}"
              end
              File.open("#{ioDeliverable.RealDir}/metadata.conf.rb", 'w') do |oFile|
                oFile << "# This file has been generated by FSCMS during build process of deliverable #{ioDeliverable.ID}. Check http://fscms.sourceforge.net for further information.\n"
                oFile << "{\n"
                oFile << "#{lLstLines.join(",\n")}\n"
                oFile << "}\n"
              end
            end
          end
        end
      end
      
    end
    
  end
  
end
